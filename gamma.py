import requests
from bs4 import BeautifulSoup
from datetime import datetime

total_levels = {}


def init():
    # Add links to location
    # ES will return ES/SPX
    # NQ will return NQ/NDX
    # RTY will return RTQ/RUT
    links = {
        'ES': '',
        'NQ': '',
        'RTY': '',
    }

    for link in links:
        if links[link]:
            total_levels.update(get_levels(links[link]))

    create_tos_script()


def get_levels(url):
    levels = {}
    headers = {
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36'}
    response = requests.get(url, headers=headers)

    if (response.status_code == 200):
        soup = BeautifulSoup(response.content, 'lxml')
        table = soup.find('table')

        first_row = 0
        column_one_key = ''
        column_two_key = ''

        for row in table.find_all('tr'):
            column_one = row.find_all('td')[0].contents[0]
            column_two = row.find_all('td')[1].contents[0]
            column_three = row.find_all('td')[2].contents[0].replace(' ', '')

            if (first_row == 0):
                # Create the key
                column_one_key = column_one.split()[0]
                column_two_key = column_two.split()[0]
                levels[column_one_key] = {}
                levels[column_two_key] = {}

                first_row += 1
            else:
                # Add values
                if (column_one.isnumeric()):
                    levels[column_one_key][column_three] = column_one
                    levels[column_two_key][column_three] = column_two
    else:
        print(f'{response.status_code} received at {url}')

    return levels


def create_tos_script():
    f = open('levels.txt', 'w')
    f.write(f'# Autogenerated on {datetime.now()}\n\n')
    f.write(get_line_colors() + '\n')

    for symbol in total_levels:
        levels = total_levels[symbol]

        tos_scripts = f'\n\n#### {symbol} ####\n'

        for level in levels:
            tos_scripts += get_line(symbol, level, levels[level])

        f.write(tos_scripts)

    f.close()


def get_line_colors():
    # Use RGB for different colors (vt) is for the volatility trigger
    return 'def vtR = 212; def vtG = 25; def vtB = 25; def r = 222; def g = 202; def b = 226;'


def get_line(symbol, level, numeric_value):
    tos_symbol = symbol if symbol == 'SPX' or symbol == 'NDX' else f'/{symbol}:XCME'
    plot_variable = f'{symbol}_{level}'
    plot = f'plot {plot_variable} = if (GetSymbol() == "{tos_symbol}") then {numeric_value} else Double.NAN;\n'
    plot_set_style = f'{plot_variable}.SetStyle(Curve.SHORT_DASH);\n'
    plot_set_color = f'{plot_variable}.SetDefaultColor(createcolor(vtR, vtG, vtB));\n\n' if level == 'VolTrig' else f'{plot_variable}.SetDefaultColor(createcolor(r, g, b));\n\n'

    return plot + plot_set_style + plot_set_color


if __name__ == '__main__':
    init()
